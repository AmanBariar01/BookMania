// MERN Stack Project



Q. What does MERN Stack means.

Ans: M Means MangoDB - No SQL Database
     E Means Express.js - Nodejs framework used for creating server side application & APIs
     R Means React.js - JavaScript library for building user interfaces.
     N Means Node.js - it provides runtime environment to run JavaScript in server side.




* Technologies Used : 1) for Frontend - React.js
		      2) for Backend - Node.js & Express.js
		      3) for Database - MangoDB

 

* For Frontend - use "npm run dev" to run frontend.
  For Backend - use "npm start" to run backend server.\

* <> </> Means its a react fragmentation. we use this to use mutliple div in same level.


Q. What's jsx?

Ans - jsx allows us to write Html code in out JavaScript code or file.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Starting to build project..
//FrontEnd
// Home Page...

(IMP Note : Create a folder name "home" in src then under home create "Home.jsx" to keep the navbar, freebok, banner & footer
	    Now iniliatise Home.jsx in app.jsx similarly we will do for all other pages like course and contact etc
)

1. using Tailwind.css for building UI. we have used Vite in Talidwind.css to create our react-app.

2. Installing Tailwind in my Project.This will generate Tailwind config file.

3. Using DaisyUi from Tailwind.css for creating Nav bar. Used Hook(in react.js) to manage the state i.e if scorlling the color of nav bar should be changed.
   
  
   (*IMP Note : 
     Hooks - It's a function in react that allows us to manage the state, and do changes as per the state, and other react features without using class components.
	     They provide a way to reuse statful logic across components.
		
	      1) UseState() - It is used to manage and update state.
	      2) UseEffect() - It is used for handling side effects during component mount , update and unmount. 
    )



4. Using DaisyUi Create Banner in Banner.Jsx(components).

5. using DaisyUi Create Footer in Footer.Jsx(components).

6. Create FreeBook.JSX for displaying free books cards(components).

	* Since there will many books and we have show many cards so first go to react-slick sliders and install it.This will give slider to scroll right or left in page.


7. using DaisyUi Create Cards.jsx in components this will dispaly all the cards then we will use this accordinly in freebook for diasplaying only free books.

	(*IMP Note :
	  Props - props(properties) are a way to pass data from a parent component to a child component. Props allows component to be Dynamic & Flexible,
		  once they recieve different data & render accordingly.
	)
	
	* We are using props here for passing values from freebook.jsx to the card.jsx
			    



8. Defining the routes of pages.

9. Install react-router-dom for defineing the routes. use "npm i react-router-dom" for this
	* Do this in App.jsx file. Also remove React.Scritmode from main.jsx file and instead use BrowserRouter.



10. Create a Course.jsx component. 

(IMP Note : Create a folder name "courses" in src then under courses create "Courses.jsx" to keep the navbar,Course & footer)

maping the cards in courses page to dispaly available books.


11. Implementing the Theme change property in navbar.jsx. Also update darkmode in tailwind.config.


12. Implementing Login & register Logic.

13. Using Daisy UI(Modal) creating login for Login.jsx in components.

14. creating signup page.

(* IMP Note- Using react-hook-form , to collect the values given in login or signup so that we can pass it to database)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//BackEnd

1. run "npm init" to initialize the node application for backend.

2. Installing Express from express.js using command "npm install express".

3. Create "index.js" which will be the entry point of Backend.
	* express will be used to run server. using const app(index.js). without express app we cant run the server.

4. go to package.json and in scripts add " "start": "node index.js" " without this we can do "npm Start" to run our backend. 

	(* IMP Note - we will install nodemon using "npm i nodemon" so that when we change anything in file index.js it should automatically restart the server
		      cuz if we dont do this after changing anything on file we have to write write npm start again and again after every change so see the changes
		      in server.
			
		      After installing nodemon update package.json from "start": "node index.js" to  "start": " nodemon index.js".
	) 

5. We will create .env file and put the port number in it rather than showing it in index.js and to do this we will require to install dotenv using
   "npm i dotenv" also we will do "type: module" and do import in index.js rather than using require function.


6. Go to mongoDB compass and get the connectionstringfrom there. 

7. use "npm i mongoose" to install mongoose so that we can use connect method to connect to our database.

8. Now we need to define model for our data in backend.

9. Now we need to create controller for our functionality.
	(*IMP Note- why are we using async & await in controller ? Because, so that while getting data it will take time so after using this our function will be in hold until 
		    data comes.
	)
10. Now we will create route folder to define routes. for defining routes we will use Express.

11. again going back to frontend to integrate it with backend. for displaying book data.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------// Frontend....

15. Now we will use js library "axios' to communicate with our API. use "npm i axios" to install axios.

16. We will first go to Course.jsx & Freebook.jsx and use axois to get & show data from backend.

(*Imp Note - we will use "npm i cors" cuz frontend is running in different port and backend is running in different port so it is giving cors error
	     so to fix this we will use cors.
)



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//Backend...


12. Implementing the login & register authorization & authentication.

13. Create user model & controller.

(*IMP Note - We will install bcryptjs so that we can use hashpassowrd to hide our password in database for security reasons.)

Backend is now completed. Back to frontend.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//FrontEnd...

17. Now we will go to Signup & Login .jsx and connect our backend to frontend using axios.

(*IMP Note - We will use react-hot-toast and install it using "npm install react-hot-toast" . to use toaster to display messages.

18. Now we will create context , in which we will do the authentication like if user is loggedin then only he can visit course page otherwise not.

19. Now we will create logout functionality. in logout.jsx (components)

20. Creating contact us page.

21. Implementing the email sending using "nodemail" in contact.jsx.

22. Creating About us page.

The End.....
